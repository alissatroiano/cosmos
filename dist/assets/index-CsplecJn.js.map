{"version":3,"file":"index-CsplecJn.js","sources":["../../src/script.js"],"sourcesContent":["window.focus(); // Capture keys right away (by default focus is on editor)\n\n// Define Game Constants\nconst GAME_CONSTANTS = {\n    CAMERA_WIDTH: 960,\n    ARC_CENTER_X: 285,\n    TRACK_RADIUS: 285,\n    TRACK_WIDTH: 45,\n    PLAYER_SPEED: .0017,\n    MIN_COLLISION_DISTANCE: 40\n};\n\n// Pick a random value from an array\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x000000); // Black background for space\n\n// Camera setup\nconst aspectRatio = window.innerWidth / window.innerHeight;\nconst cameraWidth = 960;\nconst cameraHeight = cameraWidth / aspectRatio;\n\nconst camera = new THREE.OrthographicCamera(\n    cameraWidth / -2,\n    cameraWidth / 2,\n    cameraHeight / 2,\n    cameraHeight / -2,\n    50,\n    700\n);\ncamera.position.set(0, -210, 300);\ncamera.lookAt(0, 0, 0);\n\n// Renderer setup\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.shadowMap.enabled = true;\ndocument.body.appendChild(renderer.domElement);\n\n// Lighting\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\nscene.add(ambientLight);\n\nconst dirLight = new THREE.DirectionalLight(0xffffff, 0.6);\ndirLight.position.set(100, -300, 300);\ndirLight.castShadow = true;\nscene.add(dirLight);\n\n// Create a planet\nfunction createPlanet(color = 0x732bb3, radius = 30) {\n    const geometry = new THREE.SphereGeometry(radius, 32, 32);\n    const material = new THREE.MeshPhongMaterial({\n        color: color,\n        shininess: 35\n    });\n    const sphere = new THREE.Mesh(geometry, material);\n    sphere.castShadow = true;\n    sphere.receiveShadow = true;\n    return sphere;\n}\n\nconst enemyColors = [\n    0xfcba03, // Yellow\n    0xf22e62, // Pink\n    0x8c2b3d, // Red\n    0xf6ff33, // yellow\n    0x3db32b, // lime green\n    0xc94779, // pink\n    0xeb3f3f, // salmon red\n    0xff8800, // Orange\n    0x3babd4,  // Blue\n    0xf70fc9 // Neon Pink\n]\n\n// Create player planet\nconst playerPlanet = createPlanet(0x732bb3);\n// Create enemy planet and use ememyColors array to shuffle planet colors\nlet enemyPlanet = createPlanet(enemyColors[Math.floor(Math.random() * enemyColors.length)]);\n\nscene.add(playerPlanet);\nscene.add(enemyPlanet);\n\n// Create a function for a custom orbit track shape\nfunction createOrbitTrack(trackRadius = 285, color = 0x3333ff, offsetX = 0, offsetZ = 0) {\n    // Create dotted outline\n    const outlineGeometry = new THREE.BufferGeometry();\n    const points = [];\n    const segments = 64;\n\n    // Create points for outer circle\n    for (let i = 0; i <= segments; i++) {\n        const theta = (i / segments) * Math.PI * 2;\n        points.push(\n            Math.cos(theta) * (trackRadius),\n            0,\n            Math.sin(theta) * (trackRadius)\n        );\n    }\n\n    // Create points for inner circle\n    for (let i = segments; i >= 0; i--) {\n        const theta = (i / segments) * Math.PI * 2;\n        points.push(\n            Math.cos(theta) * (trackRadius - 50),\n            0,\n            Math.sin(theta) * (trackRadius - 50)\n        );\n    }\n\n    outlineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(points, 3));\n\n    const outlineMaterial = new THREE.LineDashedMaterial({\n        color: color,\n        dashSize: 10,\n        gapSize: 10,\n        opacity: 1, // Increased opacity since it's the only visual element now\n        transparent: true\n    });\n\n    const outline = new THREE.Line(outlineGeometry, outlineMaterial);\n    outline.computeLineDistances(); // Required for dashed lines\n\n    outline.rotation.x = Math.PI / 2;\n    outline.position.x = offsetX;\n    outline.position.z = offsetZ;\n\n    return outline;\n}\n\n// Calculate offset for second track\nvar angle = 360 * (Math.PI / 180); // Convert 30 degrees to radians\nconst offsetDistance = 285; // Distance to offset the second track\nconst offsetX = Math.cos(angle) * offsetDistance;\nconst offsetZ = Math.sin(angle) * offsetDistance;\n\nconst centerAdjustX = -offsetX / 2;\nconst centerAdjustZ = -offsetZ / 2;\n// Create two tracks\nconst track1 = createOrbitTrack(285, 0x757575, centerAdjustX, centerAdjustZ); // First track\nconst track2 = createOrbitTrack(285, 0x825a5a, offsetX + centerAdjustX, offsetZ + centerAdjustZ); // Second track\n\n// Add both tracks to the scene\nscene.add(track1);\nscene.add(track2);\n\n// Game state\nconst gameState = {\n    started: false,\n    lastTimestamp: null,\n    playerAngleMoved: 0,\n    playerAngleInitial: 0,\n    score: 0,\n    lapsCompleted: 0,\n    otherPlanets: [],\n    controls: {\n        accelerate: false,\n        decelerate: false\n    }\n};\n\ngameState.otherPlanets.push({\n    mesh: enemyPlanet,\n    angle: Math.PI,\n    speed: 0.025,\n    clockwise: true\n});\n\nlet gameOver = false;\nlet playerAngle = 0;\nlet enemyAngle = Math.PI; // Start moving enemy planet on opposite side\nlet newEnemyAngle = Math.PI;\n\n// Player scores 1 point every time they go around the track\nfunction scorePoint() {\n    gameState.score += 1;\n    document.getElementById('score').innerText = gameState.score;\n    // log score in console\n    console.log('Score: ' + gameState.score);\n}\n\n// Collision detection function\nfunction checkCollision(planet1, planet2) {\n    const distance = planet1.position.distanceTo(planet2.position);\n    return distance < 50; // Adjust this value based on planet sizes\n}\n\n\n// Update animation to move along first track (you can modify this as needed)\nfunction animate() {\n    if (gameOver) return;\n    requestAnimationFrame(animate);\n\n    // Move player planet\n    playerAngle += 0.025;\n    playerPlanet.position.x = Math.cos(playerAngle) * 285 + centerAdjustX;\n    playerPlanet.position.z = Math.sin(playerAngle) * 285 + centerAdjustZ;\n\n    // Move enemy planet on track 2\n    enemyAngle += 0.025; // Speed for enemy\n    enemyPlanet.position.x = Math.cos(enemyAngle) * 285 + (offsetX + centerAdjustX);\n    enemyPlanet.position.z = Math.sin(enemyAngle) * 285 + (offsetZ + centerAdjustZ);\n\n    // Whenever the player planet goes around the track without colliding with the enemy planet three times, addd another moving enemy planet on enemy track\n    // Spawn new enemy check\n    if (playerAngle >= Math.PI * 6) {\n        let newEnemyPlanet = createPlanet(enemyColors[Math.floor(Math.random() * enemyColors.length)]);\n        scene.add(newEnemyPlanet);\n        gameState.otherPlanets.push({ mesh: newEnemyPlanet, angle: enemyAngle, speed: 0.030, clockwise: true });\n        scorePoint();\n        playerAngle = 0;\n    }\n\n    // Move new enemy planets on track 2\n    gameState.otherPlanets.forEach((enemyPlanet) => {\n        enemyPlanet.angle += enemyPlanet.speed * (enemyPlanet.clockwise ? 1 : -1);\n        enemyPlanet.mesh.position.x = Math.cos(enemyPlanet.angle) * 285 + (offsetX + centerAdjustX);\n        enemyPlanet.mesh.position.z = Math.sin(enemyPlanet.angle) * 285 + (offsetZ + centerAdjustZ);\n\n        if (checkCollision(playerPlanet, enemyPlanet.mesh)) {\n            gameOver = true;\n            alert('Game Over! Planets collided! Your score: ' + gameState.score);\n            return;\n        }\n    });\n\n    renderer.render(scene, camera);\n}\n\n// Add some stars\nfunction addStars() {\n    const starsGeometry = new THREE.BufferGeometry();\n    const starsMaterial = new THREE.PointsMaterial({\n        color: 0xFFFFFF,\n        size: 1,\n        sizeAttenuation: false\n    });\n\n    const starsVertices = [];\n    for (let i = 0; i < 1000; i++) {\n        const x = (Math.random() - 0.5) * 2000;\n        const y = (Math.random() - 0.5) * 2000;\n        const z = (Math.random() - 0.5) * 2000;\n        starsVertices.push(x, y, z);\n    }\n\n    starsGeometry.setAttribute('position',\n        new THREE.Float32BufferAttribute(starsVertices, 3));\n\n    const stars = new THREE.Points(starsGeometry, starsMaterial);\n    scene.add(stars);\n}\naddStars();\n\n// Handle window resize\nwindow.addEventListener('resize', () => {\n    const newAspectRatio = window.innerWidth / window.innerHeight;\n    const newCameraHeight = cameraWidth / newAspectRatio;\n\n    camera.top = newCameraHeight / 2;\n    camera.bottom = -newCameraHeight / 2;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Control handlers\ndocument.addEventListener('keydown', (event) => {\n    if (gameOver) return;\n\n    if (event.key === 'ArrowUp' || event.key === 'w') {\n        playerAngle += .1; // Speed up\n    }\n    if (event.key === 'ArrowDown' || event.key === 's') {\n        playerAngle -= 0.075; // Slow down\n    }\n});\n\n// update resetGame() function to reload browser and restart game\nfunction resetGame() {\n    gameOver = false;\n    playerAngle = 0;\n    enemyAngle = Math.PI;\n    animate();\n}\n\n// Add reset listener\ndocument.addEventListener('keydown', (event) => {\n    if (event.key === 'r' || event.key === 'R') {\n        resetGame();\n        // reload browser\n        window.location.reload();\n    }\n});\n\n// Start the game\nanimate();"],"names":["scene","aspectRatio","cameraWidth","cameraHeight","camera","renderer","ambientLight","dirLight","createPlanet","color","radius","geometry","material","sphere","enemyColors","playerPlanet","enemyPlanet","createOrbitTrack","trackRadius","offsetX","offsetZ","outlineGeometry","points","segments","i","theta","outlineMaterial","outline","angle","offsetDistance","centerAdjustX","centerAdjustZ","track1","track2","gameState","gameOver","playerAngle","enemyAngle","scorePoint","checkCollision","planet1","planet2","animate","newEnemyPlanet","addStars","starsGeometry","starsMaterial","starsVertices","x","y","z","stars","newAspectRatio","newCameraHeight","event","resetGame"],"mappings":"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"}